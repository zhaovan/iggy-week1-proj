{"version":3,"sources":["api/iggy.js","App.js","reportWebVitals.js","index.js"],"names":["poi","lat","lng","labels","time","a","iggyURL","fetch","method","headers","Accept","process","then","response","console","log","json","catch","err","error","iggyResult","lookup","poiOptions","App","useState","setLng","setLat","isUrban","setUrban","setTime","setLabels","option","setOptions","errors","setErrors","results","setResults","win","setWin","loading","setLoading","checkAnswer","check","res","location","result","lookupResult","className","style","fontSize","fontFamily","marginBottom","textAlign","onClick","marginLeft","marginTop","display","flexDirection","border","width","marginRight","padding","onChange","e","target","value","name","id","defaultValue","map","label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.010c0772.chunk.js","sourcesContent":["// Quick frontend wrapper for API lookup call that passes in\n// @param {float} lat - latitude of a location\n// @param {float} lng - longtitude of a location\n// @param {string} option - the specific option being passed into the\n//                          API Call (wildfire-risk, air_quality, etc)\n// @return {Object} iggyResult - Returns the result value from the iggy api call\n\nexport async function poi(lat, lng, labels, time) {\n    const iggyURL =\n        \"https://api.askiggy.com/v1/points_of_interest?latitude=\" +\n        lat +\n        \"&longitude=\" +\n        lng +\n        \"&labels=\" +\n        labels +\n        \"&within_minutes_walking=\" +\n        time;\n\n    const iggyResult = await fetch(iggyURL, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"X-Iggy-Token\": process.env.REACT_APP_IGGY_KEY,\n        },\n    })\n        .then((response) => {\n            console.log(response);\n            return response.json();\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\n    return iggyResult;\n}\n\nexport async function lookup(lat, lng, labels) {\n    const iggyURL =\n        \"https://api.askiggy.com/v1/lookup?latitude=\" +\n        lat +\n        \"&longitude=\" +\n        lng +\n        \"&labels=\" +\n        labels;\n\n    const iggyResult = await fetch(iggyURL, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"X-Iggy-Token\": process.env.REACT_APP_IGGY_KEY,\n        },\n    })\n        .then((response) => {\n            console.log(response);\n            return response.json();\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\n    return iggyResult;\n}\n\nexport async function poiOptions() {\n    const iggyURL = \"https://api.askiggy.com/v1/points_of_interest_options\";\n\n    const iggyResult = await fetch(iggyURL, {\n        method: \"GET\",\n        headers: {\n            Accept: \"application/json\",\n            \"X-Iggy-Token\": process.env.REACT_APP_IGGY_KEY,\n        },\n    })\n        .then((response) => {\n            console.log(response);\n            return response.json();\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\n    return iggyResult;\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { poi, lookup, poiOptions } from \"./api/iggy.js\";\n\nfunction App() {\n    const [lng, setLng] = useState(-93.271205);\n    const [lat, setLat] = useState(44.976469);\n\n    const [isUrban, setUrban] = useState(null);\n\n    const [time, setTime] = useState(1);\n    const [labels, setLabels] = useState(null);\n    const [option, setOptions] = useState(\"bars\");\n\n    const [errors, setErrors] = useState(null);\n    const [results, setResults] = useState(null);\n\n    const [win, setWin] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    function checkAnswer(check) {\n        setWin(check === isUrban);\n    }\n\n    async function generateLocation() {\n        setUrban(null);\n        setWin(null);\n        const location = await fetch(\"https://randomuser.me/api/\", {\n            headers: {\n                \"Allow-Control-Access-Origin\": \"*\",\n            },\n        })\n            .then((res) => {\n                return res.json();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n\n        if (location) {\n            setLat(\n                location[\"results\"][0][\"location\"][\"coordinates\"][\"latitude\"] *\n                    1\n            );\n            setLng(\n                location[\"results\"][0][\"location\"][\"coordinates\"][\"longitude\"] *\n                    1\n            );\n        }\n\n        const result = await lookup(lat, lng, \"is_urban\");\n        const labels = await poiOptions();\n        setLabels(labels[\"labels\"]);\n        if (result[\"is_urban\"] !== 1) {\n            setUrban(false);\n        } else {\n            setUrban(true);\n        }\n    }\n\n    async function getPOI() {\n        setLoading(true);\n        const lookupResult = await poi(lat, lng, option, time);\n\n        if (lookupResult[\"message\"]) {\n            setErrors(\"There was none here, try again!\");\n        } else {\n            setResults(lookupResult[option]);\n        }\n        setLoading(false);\n    }\n    return (\n        <div className=\"App\">\n            <div\n                style={{\n                    fontSize: \"64px\",\n                    fontFamily: \"Aeonik\",\n                    marginBottom: \"2%\",\n                    textAlign: \"center\",\n                }}\n            >\n                Guess if the random location is urban or not!\n            </div>\n            <button\n                className=\"button\"\n                onClick={generateLocation}\n                style={{ marginLeft: \"43%\" }}\n            >\n                Generate New Location!\n            </button>\n            {isUrban !== null ? (\n                <div>\n                    <div style={{ marginLeft: \"43%\", marginTop: \"2%\" }}>\n                        <div className=\"label header\">\n                            Is this location urban?\n                        </div>\n                        <div\n                            style={{ display: \"flex\", flexDirection: \"column\" }}\n                        >\n                            <button\n                                className=\"button\"\n                                onClick={() => checkAnswer(true)}\n                            >\n                                Yes!\n                            </button>\n                            <button\n                                className=\"button\"\n                                onClick={() => checkAnswer(false)}\n                            >\n                                No!\n                            </button>\n                        </div>\n                    </div>\n                    {win == null ? (\n                        <div />\n                    ) : win ? (\n                        <div style={{ textAlign: \"center\" }}>\n                            Congrats you won! The point was specifically ({lat},{\" \"}\n                            {lng})\n                        </div>\n                    ) : (\n                        <div style={{ textAlign: \"center\" }}>\n                            Woops! That was the wrong answer, try again!{\" \"}\n                        </div>\n                    )}\n                    <div\n                        style={{\n                            marginTop: \"4%\",\n                            display: \"flex\",\n                            border: \"1px solid\",\n                            width: \"50%\",\n                            marginLeft: \"auto\",\n                            marginRight: \"auto\",\n                            padding: \"2%\",\n                        }}\n                    >\n                        <div>\n                            <div style={{ marginBottom: \"2%\", width: \"90%\" }}>\n                                Use the below API call to help you out! This\n                                connects directly with the Iggy points of\n                                interest API to find relevant points of\n                                interests in a certain radius around a location{\" \"}\n                            </div>\n                            <div>\n                                <div className=\"label\">\n                                    Walking distance from this location (in\n                                    whole minutes)\n                                </div>\n                                <input\n                                    onChange={(e) => {\n                                        setTime(e.target.value);\n                                    }}\n                                    value={time}\n                                />\n                            </div>\n                            <div>\n                                <div className=\"label\">\n                                    Select the type of point of interest you're\n                                    looking for\n                                </div>\n                                <select\n                                    name=\"type\"\n                                    id=\"type\"\n                                    className=\"dropdown\"\n                                    defaultValue=\"bars\"\n                                    onChange={(e) => {\n                                        setOptions(e.target.value);\n                                    }}\n                                >\n                                    {labels &&\n                                        labels.map((label) => {\n                                            return (\n                                                <option value={label}>\n                                                    {label}\n                                                </option>\n                                            );\n                                        })}\n                                </select>\n                            </div>\n                            <button className=\"button\" onClick={getPOI}>\n                                Search for nearby points of interest!\n                            </button>\n                        </div>\n                        <div>\n                            {results ? (\n                                results.map((result) => {\n                                    return <div>{result.name}</div>;\n                                })\n                            ) : errors == null ? (\n                                <div></div>\n                            ) : (\n                                <div>\n                                    {\" \"}\n                                    There were no results for these paramteres,\n                                    try something else!\n                                </div>\n                            )}\n                            {loading ? <div>Loading...</div> : <div />}\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div></div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}